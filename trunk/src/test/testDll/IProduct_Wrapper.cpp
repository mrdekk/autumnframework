/*
 * Generated by Autumn Generator.
 * 
 * Copyright 2006 the original author or authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "IProduct_Wrapper.h"

/**
 * Wrapper methods for IProductA
 */
void* IProductA_Wrapper::execCreateMethod(string& method, void** Prams, int num)
{

	return NULL;
}

int IProductA_Wrapper::execVoidMethod(string& method, void** Prams, int num)
{
	return -1;
}

int IProductA_Wrapper::getParamTypes(string& method, string& types, int num)
{
	if( !method.compare("getName") && num == 0 )
		types = string("");
	else 
		return -1;

	return 0;
}

extern "C"{
	IBeanWrapper* create_IProductA_Wrapper(){
		return new IProductA_Wrapper;
	}
	void delete_IProductA_Wrapper(IBeanWrapper* p){
		delete p;
	}
}

AUTUMN_IProductA_Wrapper_Local _AUTUMN_IProductA_Wrapper_Local_;

/**
 * Wrapper methods for IProductB
 */
void* IProductB_Wrapper::execCreateMethod(string& method, void** Prams, int num)
{

	return NULL;
}

int IProductB_Wrapper::execVoidMethod(string& method, void** Prams, int num)
{
	return -1;
}

int IProductB_Wrapper::getParamTypes(string& method, string& types, int num)
{
	if( !method.compare("getName") && num == 0 )
		types = string("");
	else 
		return -1;

	return 0;
}

extern "C"{
	IBeanWrapper* create_IProductB_Wrapper(){
		return new IProductB_Wrapper;
	}
	void delete_IProductB_Wrapper(IBeanWrapper* p){
		delete p;
	}
}

AUTUMN_IProductB_Wrapper_Local _AUTUMN_IProductB_Wrapper_Local_;

/**
 * Wrapper methods for IProductC
 */
void* IProductC_Wrapper::execCreateMethod(string& method, void** Prams, int num)
{

	return NULL;
}

int IProductC_Wrapper::execVoidMethod(string& method, void** Prams, int num)
{
	if( !method.compare("setName") && num == 1 )
		this->pBean->setName(
					 *(string*)Prams[0]);
	else 
		return -1;

	return 0;
}

int IProductC_Wrapper::getParamTypes(string& method, string& types, int num)
{
	if( !method.compare("setName") && num == 1 )
		types = string("")
			  + "string|";
	else if( !method.compare("getName") && num == 0 )
		types = string("");
	else 
		return -1;

	return 0;
}

extern "C"{
	IBeanWrapper* create_IProductC_Wrapper(){
		return new IProductC_Wrapper;
	}
	void delete_IProductC_Wrapper(IBeanWrapper* p){
		delete p;
	}
}

AUTUMN_IProductC_Wrapper_Local _AUTUMN_IProductC_Wrapper_Local_;

