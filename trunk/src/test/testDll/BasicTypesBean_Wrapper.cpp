/*
 * Generated by Autumn Generator.
 * 
 * Copyright 2006 the original author or authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "BasicTypesBean_Wrapper.h"

/**
 * Wrapper methods for BasicTypesBean
 */
void* BasicTypesBean_Wrapper::execCreateMethod(string& method, void** Prams, int num)
{
	if( !method.compare("BasicTypesBean") && num == 0 )
		return (void*)(this->pBean = new BasicTypesBean());
	if( !method.compare("BasicTypesBean") && num == 13 )
		return (void*)(this->pBean = new BasicTypesBean(
				*(char*)Prams[0],
				*(unsigned char*)Prams[1],
				*(short*)Prams[2],
				*(unsigned short*)Prams[3],
				*(int*)Prams[4],
				*(unsigned int*)Prams[5],
				*(long*)Prams[6],
				*(unsigned long*)Prams[7],
				*(float*)Prams[8],
				*(double*)Prams[9],
				*(string*)Prams[10],
				*(char**)Prams[11],
				*(unsigned char**)Prams[12]));
	if( !method.compare("getCStr") && num == 0 )
		return (void*)(this->pBean->getCStr());
	if( !method.compare("getUCStr") && num == 0 )
		return (void*)(this->pBean->getUCStr());

	return NULL;
}

int BasicTypesBean_Wrapper::execVoidMethod(string& method, void** Prams, int num)
{
	if( !method.compare("setChar") && num == 1 )
		this->pBean->setChar(
					 *(char*)Prams[0]);
	else if( !method.compare("setUChar") && num == 1 )
		this->pBean->setUChar(
					 *(unsigned char*)Prams[0]);
	else if( !method.compare("setShort") && num == 1 )
		this->pBean->setShort(
					 *(short*)Prams[0]);
	else if( !method.compare("setUShort") && num == 1 )
		this->pBean->setUShort(
					 *(unsigned short*)Prams[0]);
	else if( !method.compare("setInt") && num == 1 )
		this->pBean->setInt(
					 *(int*)Prams[0]);
	else if( !method.compare("setUInt") && num == 1 )
		this->pBean->setUInt(
					 *(unsigned int*)Prams[0]);
	else if( !method.compare("setLong") && num == 1 )
		this->pBean->setLong(
					 *(long*)Prams[0]);
	else if( !method.compare("setULong") && num == 1 )
		this->pBean->setULong(
					 *(unsigned long*)Prams[0]);
	else if( !method.compare("setFloat") && num == 1 )
		this->pBean->setFloat(
					 *(float*)Prams[0]);
	else if( !method.compare("setDouble") && num == 1 )
		this->pBean->setDouble(
					 *(double*)Prams[0]);
	else if( !method.compare("setString") && num == 1 )
		this->pBean->setString(
					 *(string*)Prams[0]);
	else if( !method.compare("setCStr") && num == 1 )
		this->pBean->setCStr(
					 *(char**)Prams[0]);
	else if( !method.compare("setUCStr") && num == 1 )
		this->pBean->setUCStr(
					 *(unsigned char**)Prams[0]);
	else if( !method.compare("setIntP") && num == 1 )
		this->pBean->setIntP(
					 *(int**)Prams[0]);
	else if( !method.compare("setCStrP") && num == 1 )
		this->pBean->setCStrP(
					 *(char***)Prams[0]);
	else 
		return -1;

	return 0;
}

int BasicTypesBean_Wrapper::getParamTypes(string& method, string& types, int num)
{
	if( !method.compare("BasicTypesBean") && num == 0 )
		types = string("");
	else if( !method.compare("BasicTypesBean") && num == 13 )
		types = string("")
			  + "char|"
			  + "unsigned char|"
			  + "short|"
			  + "unsigned short|"
			  + "int|"
			  + "unsigned int|"
			  + "long|"
			  + "unsigned long|"
			  + "float|"
			  + "double|"
			  + "string|"
			  + "char*|"
			  + "unsigned char*|";
	else if( !method.compare("setChar") && num == 1 )
		types = string("")
			  + "char|";
	else if( !method.compare("setUChar") && num == 1 )
		types = string("")
			  + "unsigned char|";
	else if( !method.compare("setShort") && num == 1 )
		types = string("")
			  + "short|";
	else if( !method.compare("setUShort") && num == 1 )
		types = string("")
			  + "unsigned short|";
	else if( !method.compare("setInt") && num == 1 )
		types = string("")
			  + "int|";
	else if( !method.compare("setUInt") && num == 1 )
		types = string("")
			  + "unsigned int|";
	else if( !method.compare("setLong") && num == 1 )
		types = string("")
			  + "long|";
	else if( !method.compare("setULong") && num == 1 )
		types = string("")
			  + "unsigned long|";
	else if( !method.compare("setFloat") && num == 1 )
		types = string("")
			  + "float|";
	else if( !method.compare("setDouble") && num == 1 )
		types = string("")
			  + "double|";
	else if( !method.compare("setString") && num == 1 )
		types = string("")
			  + "string|";
	else if( !method.compare("setCStr") && num == 1 )
		types = string("")
			  + "char*|";
	else if( !method.compare("setUCStr") && num == 1 )
		types = string("")
			  + "unsigned char*|";
	else if( !method.compare("setIntP") && num == 1 )
		types = string("")
			  + "int*|";
	else if( !method.compare("setCStrP") && num == 1 )
		types = string("")
			  + "char**|";
	else if( !method.compare("getChar") && num == 0 )
		types = string("");
	else if( !method.compare("getUChar") && num == 0 )
		types = string("");
	else if( !method.compare("getShort") && num == 0 )
		types = string("");
	else if( !method.compare("getUShort") && num == 0 )
		types = string("");
	else if( !method.compare("getInt") && num == 0 )
		types = string("");
	else if( !method.compare("getUInt") && num == 0 )
		types = string("");
	else if( !method.compare("getLong") && num == 0 )
		types = string("");
	else if( !method.compare("getULong") && num == 0 )
		types = string("");
	else if( !method.compare("getFloat") && num == 0 )
		types = string("");
	else if( !method.compare("getDouble") && num == 0 )
		types = string("");
	else if( !method.compare("getString") && num == 0 )
		types = string("");
	else if( !method.compare("getCStr") && num == 0 )
		types = string("");
	else if( !method.compare("getUCStr") && num == 0 )
		types = string("");
	else 
		return -1;

	return 0;
}

void* BasicTypesBean_Wrapper::cast2Base(const string basename)
{
	if( basename == "IBasicTypesBean" )
		return (IBasicTypesBean*)(this->pBean);

	return this->pBean;
}

extern "C"{
	Autumn::IBeanWrapper* create_BasicTypesBean_Wrapper(){
		return new BasicTypesBean_Wrapper;
	}
	void delete_BasicTypesBean_Wrapper(Autumn::IBeanWrapper* p){
		delete p;
	}
}

AUTUMN_BasicTypesBean_Wrapper_Local _AUTUMN_BasicTypesBean_Wrapper_Local_;

