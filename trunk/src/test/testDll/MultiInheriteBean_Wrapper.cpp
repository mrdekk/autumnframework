/*
 * Generated by Autumn Generator.
 * 
 * Copyright 2006 the original author or authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "MultiInheriteBean_Wrapper.h"

/**
 * Wrapper methods for Multi_Base1
 */
void* Multi_Base1_Wrapper::execCreateMethod(string& method, void** Prams, int num)
{
	if( !method.compare("Multi_Base1") && num == 0 )
		return this->pBean = new Multi_Base1();

	return NULL;
}

int Multi_Base1_Wrapper::execVoidMethod(string& method, void** Prams, int num)
{
	return -1;
}

int Multi_Base1_Wrapper::getParamTypes(string& method, string& types, int num)
{
	if( !method.compare("f1") && num == 0 )
		types = string("");
	else if( !method.compare("Multi_Base1") && num == 0 )
		types = string("");
	else 
		return -1;

	return 0;
}

extern "C"{
	IBeanWrapper* create_Multi_Base1_Wrapper(){
		return new Multi_Base1_Wrapper;
	}
	void delete_Multi_Base1_Wrapper(IBeanWrapper* p){
		delete p;
	}
}

AUTUMN_Multi_Base1_Wrapper_Local _AUTUMN_Multi_Base1_Wrapper_Local_;

/**
 * Wrapper methods for Multi_Base2
 */
void* Multi_Base2_Wrapper::execCreateMethod(string& method, void** Prams, int num)
{
	if( !method.compare("Multi_Base2") && num == 0 )
		return this->pBean = new Multi_Base2();

	return NULL;
}

int Multi_Base2_Wrapper::execVoidMethod(string& method, void** Prams, int num)
{
	return -1;
}

int Multi_Base2_Wrapper::getParamTypes(string& method, string& types, int num)
{
	if( !method.compare("f2") && num == 0 )
		types = string("");
	else if( !method.compare("Multi_Base2") && num == 0 )
		types = string("");
	else 
		return -1;

	return 0;
}

extern "C"{
	IBeanWrapper* create_Multi_Base2_Wrapper(){
		return new Multi_Base2_Wrapper;
	}
	void delete_Multi_Base2_Wrapper(IBeanWrapper* p){
		delete p;
	}
}

AUTUMN_Multi_Base2_Wrapper_Local _AUTUMN_Multi_Base2_Wrapper_Local_;

/**
 * Wrapper methods for Multi_Bean
 */
void* Multi_Bean_Wrapper::execCreateMethod(string& method, void** Prams, int num)
{
	if( !method.compare("Multi_Bean") && num == 0 )
		return this->pBean = new Multi_Bean();

	return NULL;
}

int Multi_Bean_Wrapper::execVoidMethod(string& method, void** Prams, int num)
{
	return -1;
}

int Multi_Bean_Wrapper::getParamTypes(string& method, string& types, int num)
{
	if( !method.compare("f1") && num == 0 )
		types = string("");
	else if( !method.compare("f2") && num == 0 )
		types = string("");
	else if( !method.compare("Multi_Bean") && num == 0 )
		types = string("");
	else 
		return -1;

	return 0;
}

extern "C"{
	IBeanWrapper* create_Multi_Bean_Wrapper(){
		return new Multi_Bean_Wrapper;
	}
	void delete_Multi_Bean_Wrapper(IBeanWrapper* p){
		delete p;
	}
}

AUTUMN_Multi_Bean_Wrapper_Local _AUTUMN_Multi_Bean_Wrapper_Local_;

