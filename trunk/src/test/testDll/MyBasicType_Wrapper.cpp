/*
 * Generated by Autumn Generator.
 * 
 * Copyright 2006 the original author or authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "MyBasicType_Wrapper.h"

/**
 * Wrapper methods for MyBasicType
 */
void* MyBasicType_Wrapper::execCreateMethod(string& method, void** Prams, int num)
{
	if( !method.compare("createValue") && num == 3 )
		return this->pBean->createValue(
				*(string*)Prams[0],
				*(vector<string>*)Prams[1],
				*(vector<string>::iterator*)Prams[2]);
	if( !method.compare("MyBasicType") && num == 0 )
		return this->pBean = new MyBasicType();

	return NULL;
}

int MyBasicType_Wrapper::execVoidMethod(string& method, void** Prams, int num)
{
	if( !method.compare("freeValue") && num == 2 )
		this->pBean->freeValue(
					 *(void **)Prams[0],
					 *(string*)Prams[1]);
	else if( !method.compare("freeSelfSpace") && num == 1 )
		this->pBean->freeSelfSpace(
					 *(void **)Prams[0]);
	else 
		return -1;

	return 0;
}

int MyBasicType_Wrapper::getParamTypes(string& method, string& types, int num)
{
	if( !method.compare("createValue") && num == 3 )
		types = string("")
			  + "string|"
			  + "vector<string>|"
			  + "vector<string>::iterator|";
	else if( !method.compare("freeValue") && num == 2 )
		types = string("")
			  + "void *|"
			  + "string|";
	else if( !method.compare("freeSelfSpace") && num == 1 )
		types = string("")
			  + "void *|";
	else if( !method.compare("isThisType") && num == 1 )
		types = string("")
			  + "string|";
	else if( !method.compare("MyBasicType") && num == 0 )
		types = string("");
	else 
		return -1;

	return 0;
}

extern "C"{
	IBeanWrapper* create_MyBasicType_Wrapper(){
		return new MyBasicType_Wrapper;
	}
	void delete_MyBasicType_Wrapper(IBeanWrapper* p){
		delete p;
	}
}

AUTUMN_MyBasicType_Wrapper_Local _AUTUMN_MyBasicType_Wrapper_Local_;

