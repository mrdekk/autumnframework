/*
 * Generated by Autumn Generator.
 * 
 * Copyright 2006 the original author or authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "FactoryMethodBean_Wrapper.h"

/**
 * Wrapper methods for ProductA_M
 */
void* ProductA_M_Wrapper::execCreateMethod(string& method, void** Prams, int num)
{
	if( !method.compare("getInstance") && num == 1 )
		return this->pBean = ProductA_M::getInstance(
				*(string*)Prams[0]);

	return NULL;
}

int ProductA_M_Wrapper::execVoidMethod(string& method, void** Prams, int num)
{
	if( !method.compare("deleteInstance") && num == 1 )
		ProductA_M::deleteInstance(
					 *(ProductA_M**)Prams[0]);
	else 
		return -1;

	return 0;
}

int ProductA_M_Wrapper::getParamTypes(string& method, string& types, int num)
{
	if( !method.compare("getInstance") && num == 1 )
		types = string("")
			  + "string|";
	else if( !method.compare("deleteInstance") && num == 1 )
		types = string("")
			  + "ProductA_M*|";
	else if( !method.compare("getName") && num == 0 )
		types = string("");
	else 
		return -1;

	return 0;
}

extern "C"{
	IBeanWrapper* create_ProductA_M_Wrapper(){
		return new ProductA_M_Wrapper;
	}
	void delete_ProductA_M_Wrapper(IBeanWrapper* p){
		delete p;
	}
}

AUTUMN_ProductA_M_Wrapper_Local _AUTUMN_ProductA_M_Wrapper_Local_;

/**
 * Wrapper methods for ProductB_M
 */
void* ProductB_M_Wrapper::execCreateMethod(string& method, void** Prams, int num)
{
	if( !method.compare("getInstance") && num == 0 )
		return this->pBean = ProductB_M::getInstance();

	return NULL;
}

int ProductB_M_Wrapper::execVoidMethod(string& method, void** Prams, int num)
{
	if( !method.compare("deleteInstance") && num == 1 )
		ProductB_M::deleteInstance(
					 *(ProductB_M**)Prams[0]);
	else 
		return -1;

	return 0;
}

int ProductB_M_Wrapper::getParamTypes(string& method, string& types, int num)
{
	if( !method.compare("getInstance") && num == 0 )
		types = string("");
	else if( !method.compare("deleteInstance") && num == 1 )
		types = string("")
			  + "ProductB_M*|";
	else if( !method.compare("getName") && num == 0 )
		types = string("");
	else 
		return -1;

	return 0;
}

extern "C"{
	IBeanWrapper* create_ProductB_M_Wrapper(){
		return new ProductB_M_Wrapper;
	}
	void delete_ProductB_M_Wrapper(IBeanWrapper* p){
		delete p;
	}
}

AUTUMN_ProductB_M_Wrapper_Local _AUTUMN_ProductB_M_Wrapper_Local_;

