/*
 * Generated by Autumn Generator.
 * 
 * Copyright 2006 the original author or authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef FACTORYMETHODBEAN_WRAPPER_H
#define FACTORYMETHODBEAN_WRAPPER_H

#include "IBeanWrapper.h"
#include "FactoryMethodBean.h"

/**
 * Wrapper for ProductA_M
 */
class ProductA_M_Wrapper: public Autumn::IBeanWrapper{
	ProductA_M* pBean;

public: 
	ProductA_M_Wrapper(){
		this->setBeanName("ProductA_M");
		this->pBean = NULL;
	}

	~ProductA_M_Wrapper(){
		if( this->pBean && !this->deleteBean() )
			delete this->pBean;
	}

	void* getBean(){ return (void*)this->pBean; }
	void  setBean(void* p){
		this->pBean = (ProductA_M*)p;
	}

	void* execCreateMethod(string& method, void** Prams, int num);

	int execVoidMethod(string& method, void** Prams, int num);

	int getParamTypes(string& method, string& types, int num);

	void* cast2Base(const string basename);

};

extern "C"{
	DLL_EXPORT Autumn::IBeanWrapper* create_ProductA_M_Wrapper();
	DLL_EXPORT void delete_ProductA_M_Wrapper(Autumn::IBeanWrapper*);
}

class AUTUMN_ProductA_M_Wrapper_Local{
public:
	AUTUMN_ProductA_M_Wrapper_Local(){
		Autumn::registerLocalFunction(
				"create_ProductA_M_Wrapper",
				(void*)create_ProductA_M_Wrapper);
		Autumn::registerLocalFunction(
				"delete_ProductA_M_Wrapper",
				(void*)delete_ProductA_M_Wrapper);
	}
};

/**
 * Wrapper for ProductB_M
 */
class ProductB_M_Wrapper: public Autumn::IBeanWrapper{
	ProductB_M* pBean;

public: 
	ProductB_M_Wrapper(){
		this->setBeanName("ProductB_M");
		this->pBean = NULL;
	}

	~ProductB_M_Wrapper(){
		if( this->pBean && !this->deleteBean() )
			delete this->pBean;
	}

	void* getBean(){ return (void*)this->pBean; }
	void  setBean(void* p){
		this->pBean = (ProductB_M*)p;
	}

	void* execCreateMethod(string& method, void** Prams, int num);

	int execVoidMethod(string& method, void** Prams, int num);

	int getParamTypes(string& method, string& types, int num);

	void* cast2Base(const string basename);

};

extern "C"{
	DLL_EXPORT Autumn::IBeanWrapper* create_ProductB_M_Wrapper();
	DLL_EXPORT void delete_ProductB_M_Wrapper(Autumn::IBeanWrapper*);
}

class AUTUMN_ProductB_M_Wrapper_Local{
public:
	AUTUMN_ProductB_M_Wrapper_Local(){
		Autumn::registerLocalFunction(
				"create_ProductB_M_Wrapper",
				(void*)create_ProductB_M_Wrapper);
		Autumn::registerLocalFunction(
				"delete_ProductB_M_Wrapper",
				(void*)delete_ProductB_M_Wrapper);
	}
};

#endif
