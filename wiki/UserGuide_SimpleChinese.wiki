#summary 这是Autumn Framework的手册，正在编写中。

= 1. 简介 =
Autumn Framework是一个C++的依赖注入（DI）框架，它的功能是模仿JAVA领域中的Spring框架来的。但它的功能没有Spring那么强大，当前只是提供依赖注入功能，而且尽量做到对源代码的不侵入。因为C++没有象JAVA那样的动态反射机制，不能很容易地在运行时得到注入的一些相关信息，所以在使用Autumn的时候，需要做一些工作来让Autumn框架知道注入时所需要的一些信息，即需要程序员来定义一些Wrapper。

通过使用Autumn，可以将动态库很容易地跟原来的程序部署在一起，而不需要重新编译原有程序。

== 1.1. Autumn名字的由来 ==
其实没有很什么的意义，只是对应于Spring（当然Spring框架中的Spring也许并没有当春天来解）。秋天是收获的季节，希望这个框架能有所收获，能给C++的程序员带来便利。

= 2. Autumn机制 =
== 2.1. 基本概念 ==
=== Bean ===
Bean借用于Spring，是指一个需要注入的对象，它是一个POCO（Plain Old C++ Object）。在Autumn中，必须为Bean指定一个类名，Autumn将根据这个类名去找相应的Wrapper，以来创建这个类，并对其进行注入。如果将某个Bean设置为单例，则其在整个框架中只有一个实例；否则，将会在需要它的时候就创建实例，在框架中可能会存在若干它的实例。
=== BeanFactory ===
BeanFactory是创建和维护Bean的一个对象。所有需要注入的对象，也就是Bean，都是由它来创建并进行注入，也由它负责释放。BeanFacotry依据Bean的配置来创建Bean，当创建一个Bean时，它所需要的其它Bean也会被创建。当释放一个Bean时，它所使用的其它Bean也会被释放。
=== Library ===
Library是实现Bean的动态库或程序。一般情况下将Bean放在动态库中，这样变动起来比较方便。当然，如果您就是要把Bean的实现放在主程序中，Autumn也是允许的，但这时候，配置文件中库的名称只能为“local”。
=== Type ===
Type是指注入数据的类型。Autumn除了支持C++的基本类型（void除外）外，还支持用户自定义类型。如果用户有自定义的数据类型用来注入，需要在配置文件中进行配置一个Type。
== 2.2. Autumn结构 ==
http://autumnframework.googlecode.com/svn/trunk/doc/img/Autumn%20Structure.png

Autumn的结构如上图所示。Autumn核心主要包括：
 * Bean Factory，用来创建和释放Bean。
 * Bean Manager，用来管理所有创建的Bean。
 * Type Manager，管理着Autumn所支持的数据类型，用来创建作注入用的数据。
 * Autumn Config，管理着所有配置信息，包括Bean的配置、库的配置。Bean Factory依靠这些配置信息来创建Bean。

作为用户编写的应用主要包括动态库及主程序。用户程序跟Autumn核心之间的交互就是由Bean Wrapper和配置文件来完成的。
 * Bean Wrapper，封装了跟Bean打交道的一些方法和信息。
 * Configuration File，Autumn的配置文件，描述了所有的库及Bean的信息。

= 3. 使用Autumn=
== 3.1. 写POCO ==
== 3.2. 写Bean Wrapper ==
=== 实例化bean ===
实例化bean有三种方式：构造方法、静态工厂方法、实例工厂。这三种方式只能选用其一。一个bean的wrapper不能同时支持两种或两种以上的实例化方式。但当选用某一种方式时，可以有多个实例化的方法。比如，Autumn支持参数个数不同的多个构造方法，或方法名称不同的多个工厂方法。
== 3.3. 写主程序 ==
== 3.4. 编译程序 ==
== 3.5. 写配置文件 ==
== 3.6. 运行程序 ==

= 4. 注意事项 =
 * 因为Autumn框架负责注入数据的创建及释放，所以，如果在应用程序中释放注入数据的话，可能会在程序运行时出错。
